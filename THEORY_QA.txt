1.Что подразумевается под тестовой средой?
среда тестирования - это настройка программного и аппаратного обеспечения для тестирования.
Для тестовой среды ключевая область для настройки включает в себя :
-Система и приложения
-Тестовые данные
-Сервер базы данных
-Фронтальная рабочая среда
-Клиентская операционная система
-браузер
-Аппаратное обеспечение включает операционную систему сервера
-сеть
-Необходимая документация, такая как справочные документы / руководства по конфигурации / руководства по установке / руководства пользователя

2. В чем отличие build от release?
Build - это версия программного обеспечения, которую команда разработчиков передает команде тестирования для целей тестирования, а Release - это программное обеспечение, которое команда тестирования передает клиенту.

3.Основные фазы тестирования?
I) Pre-Alpha: - ПО является прототипом. Пользовательский интерфейс завершен. Но не все функции завершены. На данном этапе ПО не публикуется.Прототип, в котором всё ещё присутствует много ошибок и наверняка неполный функционал. Необходим для ознакомления с будущими возможностями программ.
II) Alpha: является ранней версией программного продукта, тестирование которой проводится внутри фирмы-разработчика. Цель - вовлечь клиента в процесс разработки. Хороший Альфа-тест должен иметь четко определенный план тестирования с комплексными тестовыми примерами. Это дает лучшее представление о надежности программного обеспечения на ранних стадиях. В некоторых случаях тестирование может быть передано на аутсорс.
III) Beta: ПО стабильно и выпускается для ограниченной пользовательской базы. Цель состоит в том, чтобы получить отзывы клиентов о продукте и внести соответствующие изменения в ПО.
IV) Release Candidate (RC): основываясь на отзывах Beta Test, вы вносите изменения в ПО и хотите проверить исправления ошибок. На этом этапе вы не хотите вносить радикальные изменения в функциональность, а просто проверяете наличие ошибок. RC также выпущен для общественности
V)Release: Все работает, ПО выпущено для общественности.

4.Что такое импакт анализ?
Impact Analysis (импакт анализ) - это исследование, которое позволяет указать затронутые места (affected areas) в проекте при разработке новой или изменении старой функциональности, а также определить, насколько значительно они были затронуты.
Затронутые области требуют большего внимания во время проведения регрессионного тестирования.
Импакт анализ может быть полезным в следующих случаях:
 - есть изменения в требованиях;
 - получен запрос на внесение изменений в продукт;
- ожидается внедрение нового модуля или функциональности в существующий продукт;
-каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.
Как мы знаем, в настоящее время продукты становятся все более большими и комплексными, а компоненты все чаще зависят друг от друга. Изменение строчки кода в таком проекте может "сломать" абсолютно все.
Информация о взаимосвязи и взаимном влиянии изменений могут помочь QA:
-сфокусироваться на тестировании функциональности, где изменения были представлены;
-принять во внимание части проекта, которые были затронуты изменениями и, возможно, пострадали;
-не тратить время на тестирование тех частей проекта, которые не были затронуты изменениями.


5.Критерии выбора тестов?
Требования к идеальному критерию тестирования:
Критерий должен быть достаточным, т.е. показывать, когда некоторое конечное множество тестов достаточно для тестирования данной программы.
Критерий должен быть полным, т.е. в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку.
Критерий должен быть надежным, т.е. любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы.
Критерий должен быть легко проверяемым, например вычисляемым на тестах.
Для нетривиальных классов программ в общем случае не существует полного и надежного критерия, зависящего от программ или спецификаций. Поэтому мы стремимся к идеальному общему критерию через реальные частные.

6 Принципы тестирования?
1)Тестирование демонстрирует наличие дефектов
2)Исчерпывающее тестирование недостижимо
3)Раннее тестирование
4)Скопление/кластеризация дефектов
5)Парадокс пестицида
6)Тестирование зависит от контекста
7)Заблуждение об отсутствии ошибок
8)Garbage in, garbage out (GIGO)

Принцип 1. Тестирование показывает наличие дефектов
Тестирование может показать, что дефекты присутствуют, но не может доказать, что дефектов нет. Тестирование только снижает вероятность наличия дефектов, которые находятся в программном обеспечении, но не гарантирует их отсутствия.Сколько бы успешных тестов вы не провели, вы не можете утверждать, что нет таких тестов, которые не нашли бы ошибку. Но если мы нашли хотя бы один дефект, мы уже можем утверждать, что в данном ПО присутствуют дефекты.

Принцип 2. Исчерпывающее тестирование невозможно
Вместо попыток «протестировать все» нам нужен некий подход к тестированию (стратегия), который обеспечит правильный объем тестирования для данного проекта, данных заказчиков (и других заинтересованных лиц) и данного продукта. При определении, какой объем тестирования достаточен, необходимо учитывать уровень риска, включая технические риски и риски, связанные с бизнесом, и такие ограничения проекта как время и бюджет. Оценка и управление рисками – одна из наиболее важных активностей в любом проекте.

Принцип 3. Раннее тестирование
Тестовые активности должны начинаться как можно раньше в цикле разработки и быть сфокусированы на определенных целях.
Этот принцип связан с понятием «цена дефекта» (cost of defect). Цена дефекта существенно растет на протяжении жизненного цикла разработки ПО. Чем раньше обнаружен дефект, тем быстрее, проще и дешевле его исправить. Дефект, найденный в требованиях, обходится дешевле всего.
Еще одно важное преимущество раннего тестирования – экономия времени. Тестовые активности могут начинаться еще до того, как написана первая строчка кода. По мере того, как готовятся требования и спецификации, тестировщики могут приступать к разработке и ревью тест-кейсов. И когда появится первая тестовая версия, можно будет сразу приступать к выполнению тестов.

Принцип 4. Скопление дефектов
Небольшое количество модулей содержит большинство дефектов, обнаруженных на этапе предрелизного тестирования, или же демонстрируют наибольшее количество отказов на этапе эксплуатации.
Многие тестировщики наблюдали такой эффект – дефекты «кучкуются». Это может происходить потому, что определенная область кода особенно сложна и запутана, или потому, что внесение изменений производит «эффект домино». Это знание часто используется для оценки рисков при планировании тестов – тестировщики фокусируются на известных «проблемных зонах». Также полезно проводить анализ первопричин (root cause analysis), чтобы предотвратить повторное появление дефектов, обнаружить причины возникновения скоплений дефектов и спрогнозировать потенциальные скопления дефектов в будущем.

Принцип 5. Парадокс пестицида
Если повторять те же тесты снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты. Повторное применение тех же тестов и тех же методик приводит к тому, что в продукте остаются именно те дефекты, против которых эти тесты и эти методики неэффективны.
Чтобы преодолеть «парадокс пестицидов», необходимо регулярно пересматривать существующие тест-кейсы и создавать новые, разнообразные тесты, которые будут выполняться на различных частях системы.

Принцип 6. Тестирование зависит от контекста
Тестирование выполняется по-разному, в зависимости от контекста. Например, тестирование систем, критических с точки зрения безопасности, проводится иначе, чем тестирование сайта интернет-магазина.
Этот принцип тесно связан с понятием риска. Что такое риск? Риск – это потенциальная проблема. У риска есть вероятность (likelihood) – она всегда выше 0 и ниже 100% – и есть влияние (impact) – те негативные последствия, которых мы опасаемся. Анализируя риски, мы всегда взвешиваем эти два аспекта: вероятность и влияние.
То же можно сказать и о мире ПО: разные системы связаны с различными уровнями риска, влияние того или иного дефекта также сильно варьируется. Одни проблемы довольно тривиальны, другие могут дорого обойтись и привести к большим потерям денег, времени, деловой репутации, а в некоторых случаях даже привести к травмам и смерти.
Уровень риска влияет на выбор методологий, техник и типов тестирования. https://www.luxoft-training.ru/upload/medialibrary/396/6.jpg

Принцип 7. Заблуждение об отсутствии ошибок
Нахождение и исправление дефектов бесполезно, если построенная система неудобна для использования и не соответствует нуждам и ожиданиям пользователей.
Заказчики ПО – люди и организации, которые покупают и используют его, чтобы выполнять свои повседневные задачи – на самом деле совершенно не интересуются дефектами и их количеством, кроме тех случаев, когда они непосредственно сталкиваются с нестабильностью продукта. Им также неинтересно, насколько ПО соответствует формальным требованиям, которые были задокументированы. Пользователи ПО более заинтересованы в том, чтобы оно помогало им эффективно выполнять задачи. ПО должно отвечать их потребностям, и именно с этой точки зрения они его оценивают.
Даже если вы выполнили все тесты и ошибок не обнаружили, это еще не гарантия того, что ПО будет соответствовать нуждам и ожиданиям пользователей.
Иначе говоря, верификация != валидация.

* Принцип 8. GIGO.

В компьютерной науке «garbage in – garbage out» (GIGO) — это концепция, в которой ошибочные или бессмысленные входные данные создают бессмысленный вывод или «мусор», т.е. при неверных входящих данных будут получены неверные результаты, даже если сам по себе алгоритм правилен. В тестировании такие случаи иногда создают намеренно, но я добавил этот принцип в общий список для того, чтобы подчеркнуть важность подготовки качественных тестовых данных, положительные они или отрицательные.

7.Что такое независимое тестирование?

8. Что такое тестирование со сдвигом влево?

9. Почему тестирование делится на отдельные этапы?

Какие есть этапы тестирования?
Как вы тестируете продукт, если требования еще не зафиксированы?
Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?
Что подразумевается под тестовыми данными? 
Что такое бета-тестирование?
Что означает пилотное тестирование? (Pilot)

Что такое бизнес – логика?
Какие существуют основные виды тестирования ПО?
Методы тестирования?
Что такое пирамида / уровни тестирования?
Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)
Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)
Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)
Что подразумевается под интеграционным тестированием?
Разница между Unit testing и Integration testing?
Что такое системное интеграционное тестирование? (SIT — System Integration testing) 
В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)
Что подразумевается под системным тестированием?
Что такое функциональное тестирование?
Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)
Что такое тестирование на соответствие? (Conformance/Compilance testing)
Что такое нефункциональное тестирование?
Что вы знаете о Тестировании удобства пользования?
Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)
Что такое тестирование интерфейса?
Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)
Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)
Что такое инсталляционное тестирование?
Что вы знаете о тестировании безопасности?
Что такое конфигурационное тестирование?
Объясните, что такое тестирование N+1
Что вы знаете о тестировании сборки? (Build Verification Test)
Что такое тестирование потоков? (Thread testing)
Что вы знаете о мутационном тестировании? (Mutation testing)
Что вы знаете о мутационном тестировании? (Mutation testing)
В чем разница между Baseline и Benchmark testing?
Что такое A/B тестирование?
Что означает сквозное тестирование? (E2E — End–to–End)
В чем разница между E2E и системным тестированием?
Что такое параллельное тестирование? (Parallel testing)
Чем AdHock тестирование отличается от Исследовательского тестирования?
